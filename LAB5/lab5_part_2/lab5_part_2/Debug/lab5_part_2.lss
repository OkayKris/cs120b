
lab5_part_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000031a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000031a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089a  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d7  00000000  00000000  00000c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000377  00000000  00000000  00001425  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000179c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000409  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000083  00000000  00000000  00001bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001c7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	e0 d0       	rcall	.+448    	; 0x26a <main>
  aa:	fb c0       	rjmp	.+502    	; 0x2a2 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <tickButton>:
enum states{Start, wait, inc, dec, res, waitoff} state;


unsigned char tempC = 0x00;

void tickButton(){
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	1f 92       	push	r1
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
    unsigned char input = (~PINA) & 0x03;
  b8:	80 e2       	ldi	r24, 0x20	; 32
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	fc 01       	movw	r30, r24
  be:	80 81       	ld	r24, Z
  c0:	80 95       	com	r24
  c2:	83 70       	andi	r24, 0x03	; 3
  c4:	89 83       	std	Y+1, r24	; 0x01
	

    switch(state){
  c6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
  ca:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <state+0x1>
  ce:	82 30       	cpi	r24, 0x02	; 2
  d0:	91 05       	cpc	r25, r1
  d2:	09 f4       	brne	.+2      	; 0xd6 <tickButton+0x28>
  d4:	42 c0       	rjmp	.+132    	; 0x15a <tickButton+0xac>
  d6:	83 30       	cpi	r24, 0x03	; 3
  d8:	91 05       	cpc	r25, r1
  da:	28 f4       	brcc	.+10     	; 0xe6 <tickButton+0x38>
  dc:	00 97       	sbiw	r24, 0x00	; 0
  de:	71 f0       	breq	.+28     	; 0xfc <tickButton+0x4e>
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	b1 f0       	breq	.+44     	; 0x110 <tickButton+0x62>
  e4:	74 c0       	rjmp	.+232    	; 0x1ce <tickButton+0x120>
  e6:	84 30       	cpi	r24, 0x04	; 4
  e8:	91 05       	cpc	r25, r1
  ea:	09 f4       	brne	.+2      	; 0xee <tickButton+0x40>
  ec:	44 c0       	rjmp	.+136    	; 0x176 <tickButton+0xc8>
  ee:	84 30       	cpi	r24, 0x04	; 4
  f0:	91 05       	cpc	r25, r1
  f2:	d0 f1       	brcs	.+116    	; 0x168 <tickButton+0xba>
  f4:	05 97       	sbiw	r24, 0x05	; 5
  f6:	09 f4       	brne	.+2      	; 0xfa <tickButton+0x4c>
  f8:	45 c0       	rjmp	.+138    	; 0x184 <tickButton+0xd6>
  fa:	69 c0       	rjmp	.+210    	; 0x1ce <tickButton+0x120>
        case Start:
        state = wait;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state+0x1>
 104:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
        tempC = 0x07;
 108:	87 e0       	ldi	r24, 0x07	; 7
 10a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 10e:	64 c0       	rjmp	.+200    	; 0x1d8 <tickButton+0x12a>

        case wait:
        if(input == 0x01){
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	39 f4       	brne	.+14     	; 0x124 <tickButton+0x76>
            state = inc;
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state+0x1>
 11e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
        } else if(input == 0x03){
            state = res;
        } else {
            state = wait;
        }
        break;
 122:	5a c0       	rjmp	.+180    	; 0x1d8 <tickButton+0x12a>
        break;

        case wait:
        if(input == 0x01){
            state = inc;
        } else if(input == 0x02){
 124:	89 81       	ldd	r24, Y+1	; 0x01
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	39 f4       	brne	.+14     	; 0x138 <tickButton+0x8a>
            state = dec;
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state+0x1>
 132:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
        } else if(input == 0x03){
            state = res;
        } else {
            state = wait;
        }
        break;
 136:	50 c0       	rjmp	.+160    	; 0x1d8 <tickButton+0x12a>
        case wait:
        if(input == 0x01){
            state = inc;
        } else if(input == 0x02){
            state = dec;
        } else if(input == 0x03){
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	83 30       	cpi	r24, 0x03	; 3
 13c:	39 f4       	brne	.+14     	; 0x14c <tickButton+0x9e>
            state = res;
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state+0x1>
 146:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
        } else {
            state = wait;
        }
        break;
 14a:	46 c0       	rjmp	.+140    	; 0x1d8 <tickButton+0x12a>
        } else if(input == 0x02){
            state = dec;
        } else if(input == 0x03){
            state = res;
        } else {
            state = wait;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state+0x1>
 154:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
        }
        break;
 158:	3f c0       	rjmp	.+126    	; 0x1d8 <tickButton+0x12a>

        case inc:
        state = waitoff;
 15a:	85 e0       	ldi	r24, 0x05	; 5
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state+0x1>
 162:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
        break;
 166:	38 c0       	rjmp	.+112    	; 0x1d8 <tickButton+0x12a>

        case dec:
        state=waitoff;
 168:	85 e0       	ldi	r24, 0x05	; 5
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state+0x1>
 170:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
        break;
 174:	31 c0       	rjmp	.+98     	; 0x1d8 <tickButton+0x12a>

        case res:
        state = waitoff;
 176:	85 e0       	ldi	r24, 0x05	; 5
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state+0x1>
 17e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
        break;
 182:	2a c0       	rjmp	.+84     	; 0x1d8 <tickButton+0x12a>

        case waitoff:
        if(input == 0x01){
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	39 f4       	brne	.+14     	; 0x198 <tickButton+0xea>
            state = waitoff;
 18a:	85 e0       	ldi	r24, 0x05	; 5
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state+0x1>
 192:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
        } else if(input == 0x03){
            state = res;
        } else {
            state = wait;
        }
        break;
 196:	20 c0       	rjmp	.+64     	; 0x1d8 <tickButton+0x12a>
        break;

        case waitoff:
        if(input == 0x01){
            state = waitoff;
        } else if(input == 0x02){
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	82 30       	cpi	r24, 0x02	; 2
 19c:	39 f4       	brne	.+14     	; 0x1ac <tickButton+0xfe>
            state = waitoff;
 19e:	85 e0       	ldi	r24, 0x05	; 5
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state+0x1>
 1a6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
        } else if(input == 0x03){
            state = res;
        } else {
            state = wait;
        }
        break;
 1aa:	16 c0       	rjmp	.+44     	; 0x1d8 <tickButton+0x12a>
        case waitoff:
        if(input == 0x01){
            state = waitoff;
        } else if(input == 0x02){
            state = waitoff;
        } else if(input == 0x03){
 1ac:	89 81       	ldd	r24, Y+1	; 0x01
 1ae:	83 30       	cpi	r24, 0x03	; 3
 1b0:	39 f4       	brne	.+14     	; 0x1c0 <tickButton+0x112>
            state = res;
 1b2:	84 e0       	ldi	r24, 0x04	; 4
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state+0x1>
 1ba:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
        } else {
            state = wait;
        }
        break;
 1be:	0c c0       	rjmp	.+24     	; 0x1d8 <tickButton+0x12a>
        } else if(input == 0x02){
            state = waitoff;
        } else if(input == 0x03){
            state = res;
        } else {
            state = wait;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state+0x1>
 1c8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
        }
        break;
 1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <tickButton+0x12a>

        default:
        state = Start;
 1ce:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state+0x1>
 1d2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <state>
        break;
 1d6:	00 00       	nop
    }


    switch(state){
 1d8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 1dc:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <state+0x1>
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	91 05       	cpc	r25, r1
 1e4:	71 f0       	breq	.+28     	; 0x202 <tickButton+0x154>
 1e6:	83 30       	cpi	r24, 0x03	; 3
 1e8:	91 05       	cpc	r25, r1
 1ea:	28 f4       	brcc	.+10     	; 0x1f6 <tickButton+0x148>
 1ec:	00 97       	sbiw	r24, 0x00	; 0
 1ee:	59 f1       	breq	.+86     	; 0x246 <tickButton+0x198>
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	59 f1       	breq	.+86     	; 0x24a <tickButton+0x19c>
        tempC = 0x00;
        PORTC = tempC;
        break;

        default:
        break;
 1f4:	2f c0       	rjmp	.+94     	; 0x254 <tickButton+0x1a6>
        state = Start;
        break;
    }


    switch(state){
 1f6:	83 30       	cpi	r24, 0x03	; 3
 1f8:	91 05       	cpc	r25, r1
 1fa:	81 f0       	breq	.+32     	; 0x21c <tickButton+0x16e>
 1fc:	04 97       	sbiw	r24, 0x04	; 4
 1fe:	d1 f0       	breq	.+52     	; 0x234 <tickButton+0x186>
        tempC = 0x00;
        PORTC = tempC;
        break;

        default:
        break;
 200:	29 c0       	rjmp	.+82     	; 0x254 <tickButton+0x1a6>
    switch(state){
        case Start:
        break;

        case inc:
        tempC = tempC + 1;
 202:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 206:	8f 5f       	subi	r24, 0xFF	; 255
 208:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        if(tempC > 9){
 20c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 210:	8a 30       	cpi	r24, 0x0A	; 10
 212:	e8 f0       	brcs	.+58     	; 0x24e <tickButton+0x1a0>
            tempC = 9;
 214:	89 e0       	ldi	r24, 0x09	; 9
 216:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        }
        break;
 21a:	19 c0       	rjmp	.+50     	; 0x24e <tickButton+0x1a0>

        case dec:
        tempC = tempC - 1;
 21c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 220:	81 50       	subi	r24, 0x01	; 1
 222:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        if(tempC > 9){
 226:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 22a:	8a 30       	cpi	r24, 0x0A	; 10
 22c:	90 f0       	brcs	.+36     	; 0x252 <tickButton+0x1a4>
            tempC = 0;
 22e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
        }
        break;
 232:	0f c0       	rjmp	.+30     	; 0x252 <tickButton+0x1a4>

        case wait:
        break;

        case res:
        tempC = 0x00;
 234:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
        PORTC = tempC;
 238:	88 e2       	ldi	r24, 0x28	; 40
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 240:	fc 01       	movw	r30, r24
 242:	20 83       	st	Z, r18
        break;
 244:	07 c0       	rjmp	.+14     	; 0x254 <tickButton+0x1a6>
    }


    switch(state){
        case Start:
        break;
 246:	00 00       	nop
 248:	05 c0       	rjmp	.+10     	; 0x254 <tickButton+0x1a6>
            tempC = 0;
        }
        break;

        case wait:
        break;
 24a:	00 00       	nop
 24c:	03 c0       	rjmp	.+6      	; 0x254 <tickButton+0x1a6>
        case inc:
        tempC = tempC + 1;
        if(tempC > 9){
            tempC = 9;
        }
        break;
 24e:	00 00       	nop
 250:	01 c0       	rjmp	.+2      	; 0x254 <tickButton+0x1a6>
        case dec:
        tempC = tempC - 1;
        if(tempC > 9){
            tempC = 0;
        }
        break;
 252:	00 00       	nop

        default:
        break;
    }

    PORTC = tempC;
 254:	88 e2       	ldi	r24, 0x28	; 40
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 25c:	fc 01       	movw	r30, r24
 25e:	20 83       	st	Z, r18
}
 260:	00 00       	nop
 262:	0f 90       	pop	r0
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <main>:

int main(void){
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
        DDRA = 0x00; PORTA = 0xFF;
 272:	81 e2       	ldi	r24, 0x21	; 33
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	fc 01       	movw	r30, r24
 278:	10 82       	st	Z, r1
 27a:	82 e2       	ldi	r24, 0x22	; 34
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	2f ef       	ldi	r18, 0xFF	; 255
 280:	fc 01       	movw	r30, r24
 282:	20 83       	st	Z, r18
        DDRC = 0xFF; PORTC = 0x00;
 284:	87 e2       	ldi	r24, 0x27	; 39
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	2f ef       	ldi	r18, 0xFF	; 255
 28a:	fc 01       	movw	r30, r24
 28c:	20 83       	st	Z, r18
 28e:	88 e2       	ldi	r24, 0x28	; 40
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	fc 01       	movw	r30, r24
 294:	10 82       	st	Z, r1

        state = Start;
 296:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state+0x1>
 29a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <state>
    while(1){
        tickButton();
 29e:	07 df       	rcall	.-498    	; 0xae <tickButton>
    }
 2a0:	fe cf       	rjmp	.-4      	; 0x29e <main+0x34>

000002a2 <_exit>:
 2a2:	f8 94       	cli

000002a4 <__stop_program>:
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <__stop_program>
