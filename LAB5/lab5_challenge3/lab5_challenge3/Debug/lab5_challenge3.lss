
lab5_challenge3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000059c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000610  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000094a  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084a  00000000  00000000  00000ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ef  00000000  00000000  0000183c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045a  00000000  00000000  00001c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000082  00000000  00000000  000020da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000215c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	4f d1       	rcall	.+670    	; 0x348 <main>
  aa:	76 c2       	rjmp	.+1260   	; 0x598 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <lightTick>:
#include <avr/delay.h>


enum festiveState{start, wait, inc, waitoff}state;
unsigned char check = 0x00;
void lightTick(){
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	2f 97       	sbiw	r28, 0x0f	; 15
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61

	unsigned char button = ~PINA & 0x01;
  c2:	80 e2       	ldi	r24, 0x20	; 32
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	fc 01       	movw	r30, r24
  c8:	80 81       	ld	r24, Z
  ca:	88 2f       	mov	r24, r24
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	81 70       	andi	r24, 0x01	; 1
  d0:	99 27       	eor	r25, r25
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	89 2b       	or	r24, r25
  d6:	09 f0       	breq	.+2      	; 0xda <lightTick+0x2c>
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	29 83       	std	Y+1, r18	; 0x01
	switch(state){
  dc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
  e0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <state+0x1>
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	91 05       	cpc	r25, r1
  e8:	89 f0       	breq	.+34     	; 0x10c <lightTick+0x5e>
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	91 05       	cpc	r25, r1
  ee:	38 f0       	brcs	.+14     	; 0xfe <lightTick+0x50>
  f0:	82 30       	cpi	r24, 0x02	; 2
  f2:	91 05       	cpc	r25, r1
  f4:	e1 f0       	breq	.+56     	; 0x12e <lightTick+0x80>
  f6:	03 97       	sbiw	r24, 0x03	; 3
  f8:	09 f4       	brne	.+2      	; 0xfc <lightTick+0x4e>
  fa:	8c c0       	rjmp	.+280    	; 0x214 <lightTick+0x166>
  fc:	9b c0       	rjmp	.+310    	; 0x234 <lightTick+0x186>
		case start:
		state = wait;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state+0x1>
 106:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
		break;
 10a:	9b c0       	rjmp	.+310    	; 0x242 <lightTick+0x194>

		case wait:
		if(button == 0x01){
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	39 f4       	brne	.+14     	; 0x120 <lightTick+0x72>
			state = inc;
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state+0x1>
 11a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
		} else {
			state = wait;
		}
		break;
 11e:	91 c0       	rjmp	.+290    	; 0x242 <lightTick+0x194>

		case wait:
		if(button == 0x01){
			state = inc;
		} else {
			state = wait;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state+0x1>
 128:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
		}
		break;
 12c:	8a c0       	rjmp	.+276    	; 0x242 <lightTick+0x194>
		
		case inc:
		state = waitoff;
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state+0x1>
 136:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	af e2       	ldi	r26, 0x2F	; 47
 140:	b3 e4       	ldi	r27, 0x43	; 67
 142:	8a 83       	std	Y+2, r24	; 0x02
 144:	9b 83       	std	Y+3, r25	; 0x03
 146:	ac 83       	std	Y+4, r26	; 0x04
 148:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	30 e4       	ldi	r19, 0x40	; 64
 14e:	4c e1       	ldi	r20, 0x1C	; 28
 150:	55 e4       	ldi	r21, 0x45	; 69
 152:	6a 81       	ldd	r22, Y+2	; 0x02
 154:	7b 81       	ldd	r23, Y+3	; 0x03
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	93 d1       	rcall	.+806    	; 0x482 <__mulsf3>
 15c:	dc 01       	movw	r26, r24
 15e:	cb 01       	movw	r24, r22
 160:	8e 83       	std	Y+6, r24	; 0x06
 162:	9f 83       	std	Y+7, r25	; 0x07
 164:	a8 87       	std	Y+8, r26	; 0x08
 166:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	40 e8       	ldi	r20, 0x80	; 128
 16e:	5f e3       	ldi	r21, 0x3F	; 63
 170:	6e 81       	ldd	r22, Y+6	; 0x06
 172:	7f 81       	ldd	r23, Y+7	; 0x07
 174:	88 85       	ldd	r24, Y+8	; 0x08
 176:	99 85       	ldd	r25, Y+9	; 0x09
 178:	03 d1       	rcall	.+518    	; 0x380 <__cmpsf2>
 17a:	88 23       	and	r24, r24
 17c:	2c f4       	brge	.+10     	; 0x188 <lightTick+0xda>
		__ticks = 1;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	9b 87       	std	Y+11, r25	; 0x0b
 184:	8a 87       	std	Y+10, r24	; 0x0a
 186:	3b c0       	rjmp	.+118    	; 0x1fe <lightTick+0x150>
	else if (__tmp > 65535)
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	3f ef       	ldi	r19, 0xFF	; 255
 18c:	4f e7       	ldi	r20, 0x7F	; 127
 18e:	57 e4       	ldi	r21, 0x47	; 71
 190:	6e 81       	ldd	r22, Y+6	; 0x06
 192:	7f 81       	ldd	r23, Y+7	; 0x07
 194:	88 85       	ldd	r24, Y+8	; 0x08
 196:	99 85       	ldd	r25, Y+9	; 0x09
 198:	70 d1       	rcall	.+736    	; 0x47a <__gesf2>
 19a:	18 16       	cp	r1, r24
 19c:	3c f5       	brge	.+78     	; 0x1ec <lightTick+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	40 e2       	ldi	r20, 0x20	; 32
 1a4:	51 e4       	ldi	r21, 0x41	; 65
 1a6:	6a 81       	ldd	r22, Y+2	; 0x02
 1a8:	7b 81       	ldd	r23, Y+3	; 0x03
 1aa:	8c 81       	ldd	r24, Y+4	; 0x04
 1ac:	9d 81       	ldd	r25, Y+5	; 0x05
 1ae:	69 d1       	rcall	.+722    	; 0x482 <__mulsf3>
 1b0:	dc 01       	movw	r26, r24
 1b2:	cb 01       	movw	r24, r22
 1b4:	bc 01       	movw	r22, r24
 1b6:	cd 01       	movw	r24, r26
 1b8:	e7 d0       	rcall	.+462    	; 0x388 <__fixunssfsi>
 1ba:	dc 01       	movw	r26, r24
 1bc:	cb 01       	movw	r24, r22
 1be:	9b 87       	std	Y+11, r25	; 0x0b
 1c0:	8a 87       	std	Y+10, r24	; 0x0a
 1c2:	0f c0       	rjmp	.+30     	; 0x1e2 <lightTick+0x134>
 1c4:	8a ef       	ldi	r24, 0xFA	; 250
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	9d 87       	std	Y+13, r25	; 0x0d
 1ca:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1cc:	8c 85       	ldd	r24, Y+12	; 0x0c
 1ce:	9d 85       	ldd	r25, Y+13	; 0x0d
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lightTick+0x122>
 1d4:	9d 87       	std	Y+13, r25	; 0x0d
 1d6:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d8:	8a 85       	ldd	r24, Y+10	; 0x0a
 1da:	9b 85       	ldd	r25, Y+11	; 0x0b
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	9b 87       	std	Y+11, r25	; 0x0b
 1e0:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1e2:	8a 85       	ldd	r24, Y+10	; 0x0a
 1e4:	9b 85       	ldd	r25, Y+11	; 0x0b
 1e6:	89 2b       	or	r24, r25
 1e8:	69 f7       	brne	.-38     	; 0x1c4 <lightTick+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1ea:	2b c0       	rjmp	.+86     	; 0x242 <lightTick+0x194>
 1ec:	6e 81       	ldd	r22, Y+6	; 0x06
 1ee:	7f 81       	ldd	r23, Y+7	; 0x07
 1f0:	88 85       	ldd	r24, Y+8	; 0x08
 1f2:	99 85       	ldd	r25, Y+9	; 0x09
 1f4:	c9 d0       	rcall	.+402    	; 0x388 <__fixunssfsi>
 1f6:	dc 01       	movw	r26, r24
 1f8:	cb 01       	movw	r24, r22
 1fa:	9b 87       	std	Y+11, r25	; 0x0b
 1fc:	8a 87       	std	Y+10, r24	; 0x0a
 1fe:	8a 85       	ldd	r24, Y+10	; 0x0a
 200:	9b 85       	ldd	r25, Y+11	; 0x0b
 202:	9f 87       	std	Y+15, r25	; 0x0f
 204:	8e 87       	std	Y+14, r24	; 0x0e
 206:	8e 85       	ldd	r24, Y+14	; 0x0e
 208:	9f 85       	ldd	r25, Y+15	; 0x0f
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <lightTick+0x15c>
 20e:	9f 87       	std	Y+15, r25	; 0x0f
 210:	8e 87       	std	Y+14, r24	; 0x0e
		_delay_ms(175);
		break;
 212:	17 c0       	rjmp	.+46     	; 0x242 <lightTick+0x194>
	
		case waitoff:
		if(button == 0x01){
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	39 f4       	brne	.+14     	; 0x228 <lightTick+0x17a>
			state = waitoff;
 21a:	83 e0       	ldi	r24, 0x03	; 3
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state+0x1>
 222:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 226:	06 c0       	rjmp	.+12     	; 0x234 <lightTick+0x186>
		} else {
			state = wait;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state+0x1>
 230:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
		}
		
		default:
		state = wait;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state+0x1>
 23c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
		break;
 240:	00 00       	nop

	}

	switch(state){
 242:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 246:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <state+0x1>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	91 05       	cpc	r25, r1
 24e:	09 f4       	brne	.+2      	; 0x252 <lightTick+0x1a4>
 250:	6c c0       	rjmp	.+216    	; 0x32a <lightTick+0x27c>
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	91 05       	cpc	r25, r1
 256:	38 f0       	brcs	.+14     	; 0x266 <lightTick+0x1b8>
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	91 05       	cpc	r25, r1
 25c:	59 f0       	breq	.+22     	; 0x274 <lightTick+0x1c6>
 25e:	03 97       	sbiw	r24, 0x03	; 3
 260:	09 f4       	brne	.+2      	; 0x264 <lightTick+0x1b6>
 262:	65 c0       	rjmp	.+202    	; 0x32e <lightTick+0x280>
		
		case waitoff:
		break;
		
		default:
		break;
 264:	67 c0       	rjmp	.+206    	; 0x334 <lightTick+0x286>

	}

	switch(state){
		case start:
		PORTB = 0x00;
 266:	85 e2       	ldi	r24, 0x25	; 37
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	fc 01       	movw	r30, r24
 26c:	10 82       	st	Z, r1
		check = 0;
 26e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 272:	60 c0       	rjmp	.+192    	; 0x334 <lightTick+0x286>
		
		case wait:
		break;
		
		case inc:
		if(check == 0){
 274:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 278:	88 23       	and	r24, r24
 27a:	31 f4       	brne	.+12     	; 0x288 <lightTick+0x1da>
			PORTB = 0x3F;	//11 1111
 27c:	85 e2       	ldi	r24, 0x25	; 37
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	2f e3       	ldi	r18, 0x3F	; 63
 282:	fc 01       	movw	r30, r24
 284:	20 83       	st	Z, r18
 286:	45 c0       	rjmp	.+138    	; 0x312 <lightTick+0x264>
		} else if (check == 1){
 288:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	31 f4       	brne	.+12     	; 0x29c <lightTick+0x1ee>
			PORTB = 0x2A;	//10 1010
 290:	85 e2       	ldi	r24, 0x25	; 37
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	2a e2       	ldi	r18, 0x2A	; 42
 296:	fc 01       	movw	r30, r24
 298:	20 83       	st	Z, r18
 29a:	3b c0       	rjmp	.+118    	; 0x312 <lightTick+0x264>
		} else if (check == 2){
 29c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2a0:	82 30       	cpi	r24, 0x02	; 2
 2a2:	31 f4       	brne	.+12     	; 0x2b0 <lightTick+0x202>
			PORTB = 0x15;	//01 0101
 2a4:	85 e2       	ldi	r24, 0x25	; 37
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	25 e1       	ldi	r18, 0x15	; 21
 2aa:	fc 01       	movw	r30, r24
 2ac:	20 83       	st	Z, r18
 2ae:	31 c0       	rjmp	.+98     	; 0x312 <lightTick+0x264>
		} else if (check == 3){
 2b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2b4:	83 30       	cpi	r24, 0x03	; 3
 2b6:	31 f4       	brne	.+12     	; 0x2c4 <lightTick+0x216>
			PORTB = 0x03;	//00 0111
 2b8:	85 e2       	ldi	r24, 0x25	; 37
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	23 e0       	ldi	r18, 0x03	; 3
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
 2c2:	27 c0       	rjmp	.+78     	; 0x312 <lightTick+0x264>
		} else if (check == 4){
 2c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c8:	84 30       	cpi	r24, 0x04	; 4
 2ca:	31 f4       	brne	.+12     	; 0x2d8 <lightTick+0x22a>
			PORTB = 0x30;	//11 1000
 2cc:	85 e2       	ldi	r24, 0x25	; 37
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	20 e3       	ldi	r18, 0x30	; 48
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18
 2d6:	1d c0       	rjmp	.+58     	; 0x312 <lightTick+0x264>
		} else if (check == 5){
 2d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2dc:	85 30       	cpi	r24, 0x05	; 5
 2de:	31 f4       	brne	.+12     	; 0x2ec <lightTick+0x23e>
			PORTB = 0x21;	//10 0001
 2e0:	85 e2       	ldi	r24, 0x25	; 37
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	21 e2       	ldi	r18, 0x21	; 33
 2e6:	fc 01       	movw	r30, r24
 2e8:	20 83       	st	Z, r18
 2ea:	13 c0       	rjmp	.+38     	; 0x312 <lightTick+0x264>
		} else if (check == 6){
 2ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2f0:	86 30       	cpi	r24, 0x06	; 6
 2f2:	31 f4       	brne	.+12     	; 0x300 <lightTick+0x252>
			PORTB = 0x0C;	//00 1100
 2f4:	85 e2       	ldi	r24, 0x25	; 37
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	2c e0       	ldi	r18, 0x0C	; 12
 2fa:	fc 01       	movw	r30, r24
 2fc:	20 83       	st	Z, r18
 2fe:	09 c0       	rjmp	.+18     	; 0x312 <lightTick+0x264>
		} else if (check == 7){
 300:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 304:	87 30       	cpi	r24, 0x07	; 7
 306:	29 f4       	brne	.+10     	; 0x312 <lightTick+0x264>
			PORTB = 0x1E;	//01 1110
 308:	85 e2       	ldi	r24, 0x25	; 37
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	2e e1       	ldi	r18, 0x1E	; 30
 30e:	fc 01       	movw	r30, r24
 310:	20 83       	st	Z, r18
		}
		
		check = check + 1;
 312:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 316:	8f 5f       	subi	r24, 0xFF	; 255
 318:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if(check == 8){
 31c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 320:	88 30       	cpi	r24, 0x08	; 8
 322:	39 f4       	brne	.+14     	; 0x332 <lightTick+0x284>
			check = 0;
 324:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		break;
 328:	04 c0       	rjmp	.+8      	; 0x332 <lightTick+0x284>
		PORTB = 0x00;
		check = 0;
		break;
		
		case wait:
		break;
 32a:	00 00       	nop
 32c:	03 c0       	rjmp	.+6      	; 0x334 <lightTick+0x286>
			check = 0;
		}
		break;
		
		case waitoff:
		break;
 32e:	00 00       	nop
 330:	01 c0       	rjmp	.+2      	; 0x334 <lightTick+0x286>
		
		check = check + 1;
		if(check == 8){
			check = 0;
		}
		break;
 332:	00 00       	nop
		
		default:
		break;
		
	}
}
 334:	00 00       	nop
 336:	2f 96       	adiw	r28, 0x0f	; 15
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	f8 94       	cli
 33c:	de bf       	out	0x3e, r29	; 62
 33e:	0f be       	out	0x3f, r0	; 63
 340:	cd bf       	out	0x3d, r28	; 61
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <main>:

int main(void)
{
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	cd b7       	in	r28, 0x3d	; 61
 34e:	de b7       	in	r29, 0x3e	; 62

	DDRA = 0x00; PORTA = 0xFF;
 350:	81 e2       	ldi	r24, 0x21	; 33
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	fc 01       	movw	r30, r24
 356:	10 82       	st	Z, r1
 358:	82 e2       	ldi	r24, 0x22	; 34
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	2f ef       	ldi	r18, 0xFF	; 255
 35e:	fc 01       	movw	r30, r24
 360:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00;
 362:	84 e2       	ldi	r24, 0x24	; 36
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	2f ef       	ldi	r18, 0xFF	; 255
 368:	fc 01       	movw	r30, r24
 36a:	20 83       	st	Z, r18
 36c:	85 e2       	ldi	r24, 0x25	; 37
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	fc 01       	movw	r30, r24
 372:	10 82       	st	Z, r1

	state = start;
 374:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state+0x1>
 378:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <state>
	while (1)
	{
		lightTick();
 37c:	98 de       	rcall	.-720    	; 0xae <lightTick>
	}
 37e:	fe cf       	rjmp	.-4      	; 0x37c <main+0x34>

00000380 <__cmpsf2>:
 380:	2f d0       	rcall	.+94     	; 0x3e0 <__fp_cmp>
 382:	08 f4       	brcc	.+2      	; 0x386 <__cmpsf2+0x6>
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	08 95       	ret

00000388 <__fixunssfsi>:
 388:	57 d0       	rcall	.+174    	; 0x438 <__fp_splitA>
 38a:	88 f0       	brcs	.+34     	; 0x3ae <__fixunssfsi+0x26>
 38c:	9f 57       	subi	r25, 0x7F	; 127
 38e:	90 f0       	brcs	.+36     	; 0x3b4 <__fixunssfsi+0x2c>
 390:	b9 2f       	mov	r27, r25
 392:	99 27       	eor	r25, r25
 394:	b7 51       	subi	r27, 0x17	; 23
 396:	a0 f0       	brcs	.+40     	; 0x3c0 <__fixunssfsi+0x38>
 398:	d1 f0       	breq	.+52     	; 0x3ce <__fixunssfsi+0x46>
 39a:	66 0f       	add	r22, r22
 39c:	77 1f       	adc	r23, r23
 39e:	88 1f       	adc	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	1a f0       	brmi	.+6      	; 0x3aa <__fixunssfsi+0x22>
 3a4:	ba 95       	dec	r27
 3a6:	c9 f7       	brne	.-14     	; 0x39a <__fixunssfsi+0x12>
 3a8:	12 c0       	rjmp	.+36     	; 0x3ce <__fixunssfsi+0x46>
 3aa:	b1 30       	cpi	r27, 0x01	; 1
 3ac:	81 f0       	breq	.+32     	; 0x3ce <__fixunssfsi+0x46>
 3ae:	5e d0       	rcall	.+188    	; 0x46c <__fp_zero>
 3b0:	b1 e0       	ldi	r27, 0x01	; 1
 3b2:	08 95       	ret
 3b4:	5b c0       	rjmp	.+182    	; 0x46c <__fp_zero>
 3b6:	67 2f       	mov	r22, r23
 3b8:	78 2f       	mov	r23, r24
 3ba:	88 27       	eor	r24, r24
 3bc:	b8 5f       	subi	r27, 0xF8	; 248
 3be:	39 f0       	breq	.+14     	; 0x3ce <__fixunssfsi+0x46>
 3c0:	b9 3f       	cpi	r27, 0xF9	; 249
 3c2:	cc f3       	brlt	.-14     	; 0x3b6 <__fixunssfsi+0x2e>
 3c4:	86 95       	lsr	r24
 3c6:	77 95       	ror	r23
 3c8:	67 95       	ror	r22
 3ca:	b3 95       	inc	r27
 3cc:	d9 f7       	brne	.-10     	; 0x3c4 <__fixunssfsi+0x3c>
 3ce:	3e f4       	brtc	.+14     	; 0x3de <__fixunssfsi+0x56>
 3d0:	90 95       	com	r25
 3d2:	80 95       	com	r24
 3d4:	70 95       	com	r23
 3d6:	61 95       	neg	r22
 3d8:	7f 4f       	sbci	r23, 0xFF	; 255
 3da:	8f 4f       	sbci	r24, 0xFF	; 255
 3dc:	9f 4f       	sbci	r25, 0xFF	; 255
 3de:	08 95       	ret

000003e0 <__fp_cmp>:
 3e0:	99 0f       	add	r25, r25
 3e2:	00 08       	sbc	r0, r0
 3e4:	55 0f       	add	r21, r21
 3e6:	aa 0b       	sbc	r26, r26
 3e8:	e0 e8       	ldi	r30, 0x80	; 128
 3ea:	fe ef       	ldi	r31, 0xFE	; 254
 3ec:	16 16       	cp	r1, r22
 3ee:	17 06       	cpc	r1, r23
 3f0:	e8 07       	cpc	r30, r24
 3f2:	f9 07       	cpc	r31, r25
 3f4:	c0 f0       	brcs	.+48     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3f6:	12 16       	cp	r1, r18
 3f8:	13 06       	cpc	r1, r19
 3fa:	e4 07       	cpc	r30, r20
 3fc:	f5 07       	cpc	r31, r21
 3fe:	98 f0       	brcs	.+38     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 400:	62 1b       	sub	r22, r18
 402:	73 0b       	sbc	r23, r19
 404:	84 0b       	sbc	r24, r20
 406:	95 0b       	sbc	r25, r21
 408:	39 f4       	brne	.+14     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40a:	0a 26       	eor	r0, r26
 40c:	61 f0       	breq	.+24     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 40e:	23 2b       	or	r18, r19
 410:	24 2b       	or	r18, r20
 412:	25 2b       	or	r18, r21
 414:	21 f4       	brne	.+8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 416:	08 95       	ret
 418:	0a 26       	eor	r0, r26
 41a:	09 f4       	brne	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41c:	a1 40       	sbci	r26, 0x01	; 1
 41e:	a6 95       	lsr	r26
 420:	8f ef       	ldi	r24, 0xFF	; 255
 422:	81 1d       	adc	r24, r1
 424:	81 1d       	adc	r24, r1
 426:	08 95       	ret

00000428 <__fp_split3>:
 428:	57 fd       	sbrc	r21, 7
 42a:	90 58       	subi	r25, 0x80	; 128
 42c:	44 0f       	add	r20, r20
 42e:	55 1f       	adc	r21, r21
 430:	59 f0       	breq	.+22     	; 0x448 <__fp_splitA+0x10>
 432:	5f 3f       	cpi	r21, 0xFF	; 255
 434:	71 f0       	breq	.+28     	; 0x452 <__fp_splitA+0x1a>
 436:	47 95       	ror	r20

00000438 <__fp_splitA>:
 438:	88 0f       	add	r24, r24
 43a:	97 fb       	bst	r25, 7
 43c:	99 1f       	adc	r25, r25
 43e:	61 f0       	breq	.+24     	; 0x458 <__fp_splitA+0x20>
 440:	9f 3f       	cpi	r25, 0xFF	; 255
 442:	79 f0       	breq	.+30     	; 0x462 <__fp_splitA+0x2a>
 444:	87 95       	ror	r24
 446:	08 95       	ret
 448:	12 16       	cp	r1, r18
 44a:	13 06       	cpc	r1, r19
 44c:	14 06       	cpc	r1, r20
 44e:	55 1f       	adc	r21, r21
 450:	f2 cf       	rjmp	.-28     	; 0x436 <__fp_split3+0xe>
 452:	46 95       	lsr	r20
 454:	f1 df       	rcall	.-30     	; 0x438 <__fp_splitA>
 456:	08 c0       	rjmp	.+16     	; 0x468 <__fp_splitA+0x30>
 458:	16 16       	cp	r1, r22
 45a:	17 06       	cpc	r1, r23
 45c:	18 06       	cpc	r1, r24
 45e:	99 1f       	adc	r25, r25
 460:	f1 cf       	rjmp	.-30     	; 0x444 <__fp_splitA+0xc>
 462:	86 95       	lsr	r24
 464:	71 05       	cpc	r23, r1
 466:	61 05       	cpc	r22, r1
 468:	08 94       	sec
 46a:	08 95       	ret

0000046c <__fp_zero>:
 46c:	e8 94       	clt

0000046e <__fp_szero>:
 46e:	bb 27       	eor	r27, r27
 470:	66 27       	eor	r22, r22
 472:	77 27       	eor	r23, r23
 474:	cb 01       	movw	r24, r22
 476:	97 f9       	bld	r25, 7
 478:	08 95       	ret

0000047a <__gesf2>:
 47a:	b2 df       	rcall	.-156    	; 0x3e0 <__fp_cmp>
 47c:	08 f4       	brcc	.+2      	; 0x480 <__gesf2+0x6>
 47e:	8f ef       	ldi	r24, 0xFF	; 255
 480:	08 95       	ret

00000482 <__mulsf3>:
 482:	0b d0       	rcall	.+22     	; 0x49a <__mulsf3x>
 484:	78 c0       	rjmp	.+240    	; 0x576 <__fp_round>
 486:	69 d0       	rcall	.+210    	; 0x55a <__fp_pscA>
 488:	28 f0       	brcs	.+10     	; 0x494 <__mulsf3+0x12>
 48a:	6e d0       	rcall	.+220    	; 0x568 <__fp_pscB>
 48c:	18 f0       	brcs	.+6      	; 0x494 <__mulsf3+0x12>
 48e:	95 23       	and	r25, r21
 490:	09 f0       	breq	.+2      	; 0x494 <__mulsf3+0x12>
 492:	5a c0       	rjmp	.+180    	; 0x548 <__fp_inf>
 494:	5f c0       	rjmp	.+190    	; 0x554 <__fp_nan>
 496:	11 24       	eor	r1, r1
 498:	ea cf       	rjmp	.-44     	; 0x46e <__fp_szero>

0000049a <__mulsf3x>:
 49a:	c6 df       	rcall	.-116    	; 0x428 <__fp_split3>
 49c:	a0 f3       	brcs	.-24     	; 0x486 <__mulsf3+0x4>

0000049e <__mulsf3_pse>:
 49e:	95 9f       	mul	r25, r21
 4a0:	d1 f3       	breq	.-12     	; 0x496 <__mulsf3+0x14>
 4a2:	95 0f       	add	r25, r21
 4a4:	50 e0       	ldi	r21, 0x00	; 0
 4a6:	55 1f       	adc	r21, r21
 4a8:	62 9f       	mul	r22, r18
 4aa:	f0 01       	movw	r30, r0
 4ac:	72 9f       	mul	r23, r18
 4ae:	bb 27       	eor	r27, r27
 4b0:	f0 0d       	add	r31, r0
 4b2:	b1 1d       	adc	r27, r1
 4b4:	63 9f       	mul	r22, r19
 4b6:	aa 27       	eor	r26, r26
 4b8:	f0 0d       	add	r31, r0
 4ba:	b1 1d       	adc	r27, r1
 4bc:	aa 1f       	adc	r26, r26
 4be:	64 9f       	mul	r22, r20
 4c0:	66 27       	eor	r22, r22
 4c2:	b0 0d       	add	r27, r0
 4c4:	a1 1d       	adc	r26, r1
 4c6:	66 1f       	adc	r22, r22
 4c8:	82 9f       	mul	r24, r18
 4ca:	22 27       	eor	r18, r18
 4cc:	b0 0d       	add	r27, r0
 4ce:	a1 1d       	adc	r26, r1
 4d0:	62 1f       	adc	r22, r18
 4d2:	73 9f       	mul	r23, r19
 4d4:	b0 0d       	add	r27, r0
 4d6:	a1 1d       	adc	r26, r1
 4d8:	62 1f       	adc	r22, r18
 4da:	83 9f       	mul	r24, r19
 4dc:	a0 0d       	add	r26, r0
 4de:	61 1d       	adc	r22, r1
 4e0:	22 1f       	adc	r18, r18
 4e2:	74 9f       	mul	r23, r20
 4e4:	33 27       	eor	r19, r19
 4e6:	a0 0d       	add	r26, r0
 4e8:	61 1d       	adc	r22, r1
 4ea:	23 1f       	adc	r18, r19
 4ec:	84 9f       	mul	r24, r20
 4ee:	60 0d       	add	r22, r0
 4f0:	21 1d       	adc	r18, r1
 4f2:	82 2f       	mov	r24, r18
 4f4:	76 2f       	mov	r23, r22
 4f6:	6a 2f       	mov	r22, r26
 4f8:	11 24       	eor	r1, r1
 4fa:	9f 57       	subi	r25, 0x7F	; 127
 4fc:	50 40       	sbci	r21, 0x00	; 0
 4fe:	8a f0       	brmi	.+34     	; 0x522 <__mulsf3_pse+0x84>
 500:	e1 f0       	breq	.+56     	; 0x53a <__mulsf3_pse+0x9c>
 502:	88 23       	and	r24, r24
 504:	4a f0       	brmi	.+18     	; 0x518 <__mulsf3_pse+0x7a>
 506:	ee 0f       	add	r30, r30
 508:	ff 1f       	adc	r31, r31
 50a:	bb 1f       	adc	r27, r27
 50c:	66 1f       	adc	r22, r22
 50e:	77 1f       	adc	r23, r23
 510:	88 1f       	adc	r24, r24
 512:	91 50       	subi	r25, 0x01	; 1
 514:	50 40       	sbci	r21, 0x00	; 0
 516:	a9 f7       	brne	.-22     	; 0x502 <__mulsf3_pse+0x64>
 518:	9e 3f       	cpi	r25, 0xFE	; 254
 51a:	51 05       	cpc	r21, r1
 51c:	70 f0       	brcs	.+28     	; 0x53a <__mulsf3_pse+0x9c>
 51e:	14 c0       	rjmp	.+40     	; 0x548 <__fp_inf>
 520:	a6 cf       	rjmp	.-180    	; 0x46e <__fp_szero>
 522:	5f 3f       	cpi	r21, 0xFF	; 255
 524:	ec f3       	brlt	.-6      	; 0x520 <__mulsf3_pse+0x82>
 526:	98 3e       	cpi	r25, 0xE8	; 232
 528:	dc f3       	brlt	.-10     	; 0x520 <__mulsf3_pse+0x82>
 52a:	86 95       	lsr	r24
 52c:	77 95       	ror	r23
 52e:	67 95       	ror	r22
 530:	b7 95       	ror	r27
 532:	f7 95       	ror	r31
 534:	e7 95       	ror	r30
 536:	9f 5f       	subi	r25, 0xFF	; 255
 538:	c1 f7       	brne	.-16     	; 0x52a <__mulsf3_pse+0x8c>
 53a:	fe 2b       	or	r31, r30
 53c:	88 0f       	add	r24, r24
 53e:	91 1d       	adc	r25, r1
 540:	96 95       	lsr	r25
 542:	87 95       	ror	r24
 544:	97 f9       	bld	r25, 7
 546:	08 95       	ret

00000548 <__fp_inf>:
 548:	97 f9       	bld	r25, 7
 54a:	9f 67       	ori	r25, 0x7F	; 127
 54c:	80 e8       	ldi	r24, 0x80	; 128
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	08 95       	ret

00000554 <__fp_nan>:
 554:	9f ef       	ldi	r25, 0xFF	; 255
 556:	80 ec       	ldi	r24, 0xC0	; 192
 558:	08 95       	ret

0000055a <__fp_pscA>:
 55a:	00 24       	eor	r0, r0
 55c:	0a 94       	dec	r0
 55e:	16 16       	cp	r1, r22
 560:	17 06       	cpc	r1, r23
 562:	18 06       	cpc	r1, r24
 564:	09 06       	cpc	r0, r25
 566:	08 95       	ret

00000568 <__fp_pscB>:
 568:	00 24       	eor	r0, r0
 56a:	0a 94       	dec	r0
 56c:	12 16       	cp	r1, r18
 56e:	13 06       	cpc	r1, r19
 570:	14 06       	cpc	r1, r20
 572:	05 06       	cpc	r0, r21
 574:	08 95       	ret

00000576 <__fp_round>:
 576:	09 2e       	mov	r0, r25
 578:	03 94       	inc	r0
 57a:	00 0c       	add	r0, r0
 57c:	11 f4       	brne	.+4      	; 0x582 <__fp_round+0xc>
 57e:	88 23       	and	r24, r24
 580:	52 f0       	brmi	.+20     	; 0x596 <__fp_round+0x20>
 582:	bb 0f       	add	r27, r27
 584:	40 f4       	brcc	.+16     	; 0x596 <__fp_round+0x20>
 586:	bf 2b       	or	r27, r31
 588:	11 f4       	brne	.+4      	; 0x58e <__fp_round+0x18>
 58a:	60 ff       	sbrs	r22, 0
 58c:	04 c0       	rjmp	.+8      	; 0x596 <__fp_round+0x20>
 58e:	6f 5f       	subi	r22, 0xFF	; 255
 590:	7f 4f       	sbci	r23, 0xFF	; 255
 592:	8f 4f       	sbci	r24, 0xFF	; 255
 594:	9f 4f       	sbci	r25, 0xFF	; 255
 596:	08 95       	ret

00000598 <_exit>:
 598:	f8 94       	cli

0000059a <__stop_program>:
 59a:	ff cf       	rjmp	.-2      	; 0x59a <__stop_program>
